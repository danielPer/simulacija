package model.am;

import java.sql.CallableStatement;
import java.sql.Connection;

import java.sql.SQLException;
import java.sql.Statement;

import java.sql.Types;


import model.am.common.AppModule;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 26 16:05:48 CET 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for Pumpa1.
     * @return Pumpa1
     */
    public ViewObjectImpl getPumpa1() {
        return (ViewObjectImpl) findViewObject("Pumpa1");
    }

    /**
     * Container's getter for Redpumpe1.
     * @return Redpumpe1
     */
    public ViewObjectImpl getRedpumpe1() {
        return (ViewObjectImpl) findViewObject("Redpumpe1");
    }

    /**
     * Container's getter for Transakcija1.
     * @return Transakcija1
     */
    public ViewObjectImpl getTransakcija1() {
        return (ViewObjectImpl) findViewObject("Transakcija1");
    }

    /**
     * Container's getter for Transmaster1.
     * @return Transmaster1
     */
    public ViewObjectImpl getTransmaster1() {
        return (ViewObjectImpl) findViewObject("Transmaster1");
    }

    /**
     * Container's getter for Redpumpe2.
     * @return Redpumpe2
     */
    public ViewObjectImpl getRedpumpe2() {
        return (ViewObjectImpl) findViewObject("Redpumpe2");
    }

    /**
     * Container's getter for Transakcija2.
     * @return Transakcija2
     */
    public ViewObjectImpl getTransakcija2() {
        return (ViewObjectImpl) findViewObject("Transakcija2");
    }

    /**
     * Container's getter for Transakcija3.
     * @return Transakcija3
     */
    public ViewObjectImpl getTransakcija3() {
        return (ViewObjectImpl) findViewObject("Transakcija3");
    }

    /**
     * Container's getter for RedpumpePumpaFkLink1.
     * @return RedpumpePumpaFkLink1
     */
    public ViewLinkImpl getRedpumpePumpaFkLink1() {
        return (ViewLinkImpl) findViewLink("RedpumpePumpaFkLink1");
    }

    /**
     * Container's getter for TransakcijaPumpaFkLink1.
     * @return TransakcijaPumpaFkLink1
     */
    public ViewLinkImpl getTransakcijaPumpaFkLink1() {
        return (ViewLinkImpl) findViewLink("TransakcijaPumpaFkLink1");
    }

    /**
     * Container's getter for TransakcijaMasterFkLink1.
     * @return TransakcijaMasterFkLink1
     */
    public ViewLinkImpl getTransakcijaMasterFkLink1() {
        return (ViewLinkImpl) findViewLink("TransakcijaMasterFkLink1");
    }
    
    private Connection getConn(){
        Statement st = null;
        
        try {
            st = getDBTransaction().createStatement(0);
            return st.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (st != null){
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    
    public String insertDolazak(Integer masterId, Integer pumpaId){
        System.out.println("----- pozvana proba");
        Connection conn = getConn();
        CallableStatement cs = null;
        String stmt = "MAINPACK.insertDolazakSP(?,?,?)";// = poziv procedure
        Object resul = null;
        try {
            
            cs = conn.prepareCall("begin " + stmt + "; end;");
            cs.setObject("id_master_p", masterId);
            cs.setObject("id_pumpe_p", pumpaId);
            cs.registerOutParameter("current_queue_p", Types.NUMERIC);
            cs.execute();
            resul = cs.getObject("current_queue_p");
            System.out.println("rezultat je  ------------- " + resul);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (cs != null){
                try {
                    cs.close();
                } catch (SQLException e) {
                }
            }
        }
        return String.valueOf(resul);
    }
    
    public String insertOdlazak(Integer masterId, Integer pumpaId){
        System.out.println("----- pozvana proba");
        Connection conn = getConn();
        CallableStatement cs = null;
        String stmt = "MAINPACK.insertOdlazakSP(?,?,?)";// = poziv procedure
        Object resul = null;
        try {
            
            cs = conn.prepareCall("begin " + stmt + "; end;");
            cs.setObject("id_master_p", masterId);
            cs.setObject("id_pumpe_p", pumpaId);
            cs.registerOutParameter("current_queue_p", Types.NUMERIC);
            cs.execute();
            resul = cs.getObject("current_queue_p");
            System.out.println("rezultat je  ------------- " + resul);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (cs != null){
                try {
                    cs.close();
                } catch (SQLException e) {
                }
            }
        }
        return String.valueOf(resul);
    }
    
    public String insertKrajPunjenja(Integer masterId, Integer pumpaId){
        System.out.println("----- pozvana proba");
        Connection conn = getConn();
        CallableStatement cs = null;
        String stmt = "MAINPACK.insertKrajPunjenjaSP(?,?)";// = poziv procedure
        Object resul = null;
        try {
            
            cs = conn.prepareCall("begin " + stmt + "; end;");
            cs.setObject("id_master_p", masterId);
            cs.setObject("id_pumpe_p", pumpaId);
            cs.execute();
            } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (cs != null){
                try {
                    cs.close();
                } catch (SQLException e) {
                }
            }
        }
        return "ok";
    }
    
    public String currentQueue(Integer masterId, Integer pumpaId){
        System.out.println("----- pozvana proba");
        Connection conn = getConn();
        CallableStatement cs = null;
        String stmt = "POMPACK.redpumpeSP(?,?,?)";// = poziv procedure
        Object resul = null;
        try {
            
            cs = conn.prepareCall("begin " + stmt + "; end;");
            cs.setObject("pumpa_p", pumpaId);
            cs.setObject("id_master_p", masterId);
            cs.registerOutParameter("current_queue_p", Types.NUMERIC);
            cs.execute();
            resul = cs.getObject("current_queue_p");
            System.out.println("rezultat je  ------------- " + resul);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (cs != null){
                try {
                    cs.close();
                } catch (SQLException e) {
                }
            }
        }
        return String.valueOf(resul);
    }
}

